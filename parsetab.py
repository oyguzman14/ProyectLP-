
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARRAY ARRAY_KEY_FIRST AS COMA COMMENT CONCATENA_C DECIMAL DECREMENTO DECREMENTO_C DESIGUALDAD DIVIDE ECHO ELSE FALSE FIN FLECHA FOREACH FUNCTION IF IGUAL IGUALDAD INCIO INCREMENTO INCREMENTO_C LLAVE_D LLAVE_I MAS MAYOR_IGUAL MAYOR_QUE MENOR_IGUAL MENOR_QUE MENOS MODULO NEGACION NOMBRE_FUNCION NUMERO OR PARENTESIS_D PARENTESIS_I POR PRINT PUNTO_COMA SHUFFLE STRING STR_REPEAT STR_SHUFFLE TRUE VARIABLE WHILEexpresion : valorexpresion : valor operadoresMat expresion\n               | PARENTESIS_I expresion PARENTESIS_D\n               | expresion operadoresMat expresion\n  operadoresMat  : MAS\n                    | MENOS\n                    | DIVIDE\n                    | POR\n                    | MODULO\n  valor  : NUMERO\n            | VARIABLE\n            | DECIMAL\n  '
    
_lr_action_items = {'PARENTESIS_I':([0,3,7,8,9,10,11,12,13,],[3,3,3,-5,-6,-7,-8,-9,3,]),'NUMERO':([0,3,7,8,9,10,11,12,13,],[4,4,4,-5,-6,-7,-8,-9,4,]),'VARIABLE':([0,3,7,8,9,10,11,12,13,],[5,5,5,-5,-6,-7,-8,-9,5,]),'DECIMAL':([0,3,7,8,9,10,11,12,13,],[6,6,6,-5,-6,-7,-8,-9,6,]),'$end':([1,2,4,5,6,15,16,17,],[0,-1,-10,-11,-12,-4,-2,-3,]),'MAS':([1,2,4,5,6,14,15,16,17,],[8,8,-10,-11,-12,8,8,8,-3,]),'MENOS':([1,2,4,5,6,14,15,16,17,],[9,9,-10,-11,-12,9,9,9,-3,]),'DIVIDE':([1,2,4,5,6,14,15,16,17,],[10,10,-10,-11,-12,10,10,10,-3,]),'POR':([1,2,4,5,6,14,15,16,17,],[11,11,-10,-11,-12,11,11,11,-3,]),'MODULO':([1,2,4,5,6,14,15,16,17,],[12,12,-10,-11,-12,12,12,12,-3,]),'PARENTESIS_D':([2,4,5,6,14,15,16,17,],[-1,-10,-11,-12,17,-4,-2,-3,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expresion':([0,3,7,13,],[1,14,15,16,]),'valor':([0,3,7,13,],[2,2,2,2,]),'operadoresMat':([1,2,14,15,16,],[7,13,7,7,7,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expresion","S'",1,None,None,None),
  ('expresion -> valor','expresion',1,'p_expresion','analizadorSintactico.py',7),
  ('expresion -> valor operadoresMat expresion','expresion',3,'p_operacionMat','analizadorSintactico.py',11),
  ('expresion -> PARENTESIS_I expresion PARENTESIS_D','expresion',3,'p_operacionMat','analizadorSintactico.py',12),
  ('expresion -> expresion operadoresMat expresion','expresion',3,'p_operacionMat','analizadorSintactico.py',13),
  ('operadoresMat -> MAS','operadoresMat',1,'p_operadoresMat','analizadorSintactico.py',17),
  ('operadoresMat -> MENOS','operadoresMat',1,'p_operadoresMat','analizadorSintactico.py',18),
  ('operadoresMat -> DIVIDE','operadoresMat',1,'p_operadoresMat','analizadorSintactico.py',19),
  ('operadoresMat -> POR','operadoresMat',1,'p_operadoresMat','analizadorSintactico.py',20),
  ('operadoresMat -> MODULO','operadoresMat',1,'p_operadoresMat','analizadorSintactico.py',21),
  ('valor -> NUMERO','valor',1,'p_valor','analizadorSintactico.py',28),
  ('valor -> VARIABLE','valor',1,'p_valor','analizadorSintactico.py',29),
  ('valor -> DECIMAL','valor',1,'p_valor','analizadorSintactico.py',30),
]
